#!/usr/bin/python3
#
# The MIT License (MIT)
#
# Copyright (C) 2012 - Francis Giraldeau <francis.giraldeau@gmail.com>
# Copyright (C) 2018 - Genevi√®ve Bastien <gbastien@versatic.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# given a command, trace the application with ust, kernel or both
# kernel tracing is enabled only if the user has appropriate rights
# the basename of the command will be used as the directory if none is provided

import argparse
import os
import sys
import re
import subprocess
import time
from os.path import join, expanduser
import logging
import string
from subprocess import CalledProcessError
import shutil
import signal
import yaml
import traceback
import datetime
from lttngutils import profile, lttng

# the lttng command
LTTNG="lttng"

description="""LTTng tracing helper script. It will enable the proper events,
from kernel or ust domain depending on the selected profile. It either starts
a tracing session until the user decides to stop it or trace only the command
at the end of the command line."""

dry_run = False
log_stream = sys.stdout
trace_running = True
current = ""
original_sigint = signal.getsignal(signal.SIGINT)
lttngProfiles = profile.Profile()

default_profile = "kernel"
evlist_search_path = [ os.path.join(os.getcwd(), "profiles/"),
                       os.path.join(expanduser('~'), ".lttng-utils/profiles/"),
                       "/usr/local/share/lttng-utils/profiles/",
                       "/usr/share/lttng-utils/profiles/" ]

def cmd_stub(cmds, check, cmd_env=None, with_shell=False):
    if cmd_env is None:
        cmd_env = os.environ
    logging.debug("LD_PRELOAD=" + cmd_env.get("LD_PRELOAD", ""))
    logging.debug("exec: " + " ".join(cmds))
    retcode = 0
    if (dry_run == False):
        retcode = subprocess.call(cmds, stdout=log_stream, stderr=log_stream, env=cmd_env)
        logging.debug("exit: " + str(retcode))
    else:
        preload_lib = cmd_env.get("LD_PRELOAD", "")
        preload_str = ""
        if (preload_lib):
            preload_str = "LD_PRELOAD=" + preload_lib + " "
        print(preload_str + " ".join(cmds))
        print("")
    if (check and retcode != 0):
        cmd_stub([LTTNG,"destroy", current], False)
        raise Exception("command failed")

def stop_running_trace(signum, frame):
    # Signal the tracing is to be stopped
    global trace_running
    trace_running = False

    # restore the original signal handler
    global original_sigint
    signal.signal(signal.SIGINT, original_sigint)

def wait_for_trace_interruption():
    global trace_running

    # Wait for ctrl-c to stop the trace
    signal.signal(signal.SIGINT, stop_running_trace)
    print("The trace is now recording, press ctrl+c to stop it")
    while trace_running:
        print(".", end='', flush=True)
        time.sleep(1)

def stop_tracing(current_session):
    cmd_stub([LTTNG,"stop"], False)
    cmd_stub([LTTNG,"destroy", current_session], False)
    logging.info("done tracing: " + current_session)

def do_trace(cmd, session, options):
    # Load the profile to determine whether to trace kernel or ust
    profile = lttngProfiles.load_profiles(options.selected_profile.split(","))
    if (not profile["kernel"] and not profile["ust"] and not options.enable_all_events):
        logging.error("Nothing to trace!")
        return
    if (profile["kernel"] or options.enable_all_events):
        # Check that the kernel tracer is available
        if (lttng.check_kernel_tracer() == False):
            sys.exit(1)
        session += "-k"
    if (profile["ust"] or options.enable_all_events):
        # Check that the userspace tracer is available
        if (lttng.check_ust_tracer() == False):
            sys.exit(1)
        session += "-u"
    session += "-" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
    out = join(options.output, session)
    # generate random uuid
    current = session

    logging.info("start tracing: " + current)

    # Step 1: start session
    try:
        cmd_stub([LTTNG, "create", current, "-o", out], True)
    except Exception as e:
        # if it fails, it may be stalled, try again, but make failure fatal
        cmd_stub([LTTNG, "destroy", current], False)
        cmd_stub([LTTNG, "create", current, "-o", out], True)

    # Step 2: enable required events
    add_context = False
    if (profile["kernel"] or options.enable_all_events):
        cmd_stub([LTTNG, "enable-channel", "k", "-k", "--subbuf-size", "2048K", "--num-subbuf", "8"], True)
        if (options.enable_all_events):
            cmd_stub([LTTNG, "enable-event", "-c", "k", "-a", "-k"], True)
        else:
            evlist = profile["kernel"]
            logging.info("kernel event list: " + ", ".join(evlist))
            # enable pid/tid context if there is no sched_switch event
            if (not "sched_switch" in evlist or options.stateless):
                add_context = True
                cmd_stub([LTTNG, "add-context", "-c", "k", "-k", "-t", "pid", "-t", "tid", "-t", "procname"], True)
            if ("syscall" in evlist):
                evlist.remove("syscall")
                # do not check the return code, see http://bugs.lttng.org/issues/847
                cmd_stub([LTTNG, "enable-event", "-c", "k", "-a", "-k", "--syscall"], False)
            if profile["kernel"]:
                cmd_stub([LTTNG, "enable-event", "-c", "k", "-k", ",".join(evlist)], True)
    if (profile["ust"] or options.enable_all_events):
        cmd_stub([LTTNG, "enable-channel", "u", "-u", "--subbuf-size", "1024K", "--num-subbuf", "8"], True)
        if (options.enable_all_events):
            cmd_stub([LTTNG, "enable-event", "-c", "u", "-a", "-u"], True)
        else:
            logging.info("userspace event list: " + ", ".join(profile["ust"]))
            cmd_stub([LTTNG, "enable-event", "-c", "u", "-u", ",".join(profile["ust"])], True)
        # enable pid/tid context if there is no sched_switch event
        if not profile["kernel"] or add_context:
            cmd_stub([LTTNG, "add-context", "-c", "u", "-u", "-t", "vpid", "-t", "vtid"], True)

    # Step 3: start tracing
    cmd_stub([LTTNG, "start"], True)

    # Step 4: run the program under tracing
    # Do not check the return value
    cmd_env = os.environ;
    if profile["preload"]:
        cmd_env = os.environ.copy()
        cmd_env["LD_PRELOAD"] = " ".join(profile["preload"])

    # execute the command or wait for interruption
    if (cmd is not None):
        logging.info("Executing command: " + " ".join(cmd))
        cmd_stub(cmd, False, cmd_env)
    else:
        if not options.dry_run:
            wait_for_trace_interruption()

    # Step 5: tear down
    stop_tracing(current)

    # Step 6: Print trace path
    if not options.dry_run:
        print("")
        print("The trace is available for analysis at " + out)

if __name__=="__main__":
    # default directory for traces
    destdir = os.getenv("LTTNG_TRACE_HOME")
    if destdir is None:
        destdir = os.getcwd()

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("-o", "--output", dest="output", help="Output base directory for traces", metavar="DIR", default=destdir)
    parser.add_argument("-p", "--enable-profile", dest="selected_profile", default=default_profile, help="The tracing profile to use to get the events to trace. Can be a comma-separated list of profiles. Profiles can be absolute path to profile file. Default: kernel")
    parser.add_argument("--list-profiles", dest="list_profiles", default=False, action="store_true", help="List event profiles")
    parser.add_argument("--list-profile", dest="list_profile", help="Get details on this profile")
    parser.add_argument("-a", "--all", dest="enable_all_events", default=False, action="store_true", help="Enable all events. This option has precedence over the selected profile")
    parser.add_argument("-n", "--dry-run", dest="dry_run", default=False, action="store_true", help="Outputs the commands without executing them. The output can be copied to a script and run")
    parser.add_argument("--stateless", dest="stateless", default=False, action="store_true", help="Enable pid/tid/procname context for stateless trace processing")
    parser.add_argument("--name", dest="name", metavar="NAME", default=None, help="trace output name (default to command name with k/u suffix)")
    parser.add_argument('--verbose', '-v', action='count', dest="verbose", help="Verbose mode. The number of -v will increase verbosity of logging.")
    parser.add_argument('command', nargs=argparse.REMAINDER, help="The command to trace. It will be executed after the trace has started and the trace will terminate after its execution.")

    options = parser.parse_args()

    if (options.list_profiles):
        lttngProfiles.print_profiles()
        sys.exit(0)

    if (options.list_profile):
        lttngProfiles.print_profiles_detail(options.list_profile.split(","))
        sys.exit(0)

    # try to create base directory if it doesn't exists
    if not os.path.exists(options.output):
        os.makedirs(options.output)

    dry_run = options.dry_run
    fmt = '%(asctime)s %(levelname)s: %(message)s'
    log_level = {
        1: logging.WARNING,
        2: logging.INFO,
        3: logging.DEBUG
    }.get(options.verbose, logging.DEBUG)
    log_level = log_level if options.verbose else logging.ERROR
    logging.basicConfig(level=log_level, format=fmt)

    if (dry_run == False):
        # Check that a session daemon is running
        if (lttng.check_sessiond() == False):
            sys.exit(1)

    logger = logging.getLogger()
    log_stream = logger.handlers[0].stream

    command = options.command
    target = {"name": "default", "cmd": None}
    if (command is not None and type(command) is list and len(command) > 0):
        target["name"] = os.path.basename(command[0])
        target["cmd"] = command
    # overide session name
    if (options.name is not None):
        target["name"] = options.name

    try:
        do_trace(target["cmd"], target["name"], options)
    except Exception as e:
        logging.error(str(e))
        tb = traceback.format_exc()
        print(tb)
        cmd_stub([LTTNG,"destroy", "-a"], False)
    else:
        logging.debug("done")
